@Library('my_library') _
node{
    timestamps{
        withEnv([
            "TEST_STACK=${env.TEST_STACK}",
            "TESTS=${env.TESTS}",
            "KEEP_FAILURE_ENV=${env.KEEP_FAILURE_ENV}",
            "KEEP_MINUTES=${env.KEEP_MINUTES}",
            "KEEP_DOCKER_ON_FAILURE=${env.KEEP_DOCKER_ON_FAILURE}"
        ]){
        def manifest = new pipeline.common.Manifest()
        def unit_test = new pipeline.rackhd.source_code.UnitTest()

        manifest.downloadManifest("https://dl.bintray.com/rackhd/binary/master-20170806","master-20170806")
        stash name: "prgate_manifest", includes: "master-20170806"
        manifest_dict = [:]
        manifest_dict["stash_name"] = "prgate_manifest"
        manifest_dict["stash_path"] = "master-20170806"
        /*
        stage("Unit Test"){
            def unit_test_branches = [:]
            unit_test_branches["on-core"] = {
                unit_test.runTest(manifest_dict, "on-core")
            }
            unit_test_branches["on-tasks"] = {
                unit_test.runTest(manifest_dict, "on-tasks")
            }
            parallel unit_test_branches
        }*/

        stage("Function Test"){
            def function_test = new pipeline.rackhd.source_code.FunctionTest()
            def function_test_branches = [:]
            ArrayList<String> used_resources = []
            List tests = Arrays.asList(TESTS.split(','))
            int sleep_mins = Integer.valueOf(KEEP_MINUTES)
            boolean keep_docker_on_failure = KEEP_DOCKER_ON_FAILURE=='true'
            boolean keep_failure_env = KEEP_FAILURE_ENV=='true'
            for(int i=0; i<tests.size(); i++){
                String test_name = tests[i]
                function_test_branches[test_name] = {
                    function_test.runTest(TEST_STACK, test_name, used_resources, manifest_dict, keep_docker_on_failure,keep_failure_env,sleep_mins)
                }
            }
            parallel function_test_branches
        }
        }
    }
}
