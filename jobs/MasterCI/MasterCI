node{
    timestamps{
        withEnv([
            "branch=${env.branch}",
            "IS_OFFICIAL_RELEASE=false",
            "date=current",
            "timezone=-0500",
            "OS_VER=${env.OS_VER}",
            "TFTP_STATIC_FILES=${env.TFTP_STATIC_FILES}",
            "HTTP_STATIC_FILES=${env.HTTP_STATIC_FILES}",
            "USE_VCOMPUTE=${env.USE_VCOMPUTE}",
            "TESTS=${env.TESTS}",
            "OVA_POST_TESTS=${env.OVA_POST_TESTS}",
            "BINTRAY_SUBJECT=${env.BINTRAY_SUBJECT}",
            "PUBLISH=${env.PUBLISH}",
            "OVA_CACHE_BUILD=true"
        ]){
            def message = "Job Name: ${env.JOB_NAME} \n" + "Build Full URL: ${env.BUILD_URL} \n" + "Phase: STARTED \n"
            echo "$message"
            slackSend "$message"
            deleteDir()
            checkout scm
            def shareMethod = load("jobs/ShareMethod.groovy")
            try{
                stage("Create Manifest"){
                    load("jobs/create_manifest/create_manifest.groovy")
                }
                def manifest_name=env.MANIFEST_FILE_URL.tokenize('/')[-1];
                currentBuild.description = "<a href=${env.MANIFEST_FILE_URL}>${manifest_name}</a>";
 
                shareMethod.downloadManifest(env.MANIFEST_FILE_URL, manifest_name)

                stash name: "masterci_manifest", includes: "${manifest_name}"
                env.stash_manifest_name = "masterci_manifest"
                env.stash_manifest_path = "${manifest_name}"

                def repo_dir = pwd()
                def TESTS = "${env.TESTS}"
                def test_type = "manifest"
                // Create an instance of UnitTest/UnitTest.groovy
                def unit_test = load("jobs/UnitTest/UnitTest.groovy")
                // Create an instance of FunctionTest/FunctionTest.groovy
                def function_test = load("jobs/FunctionTest/FunctionTest.groovy")
                def source_based_test = load("jobs/FunctionTest/SourceBasedTest.groovy")
                try{
                    stage("Unit Test"){
                        echo "Unit-Test"
                        // Call the function runTest to run unit test
                        //unit_test.runTest(env.stash_manifest_name, env.stash_manifest_path, repo_dir)
                    }
                    stage("Function Test"){
                        // Run function test
                        echo "Function Test"
                        //source_based_test.runTests(function_test)
                    }
                } finally{
                    //unit_test.archiveArtifactsToTarget("UnitTest")
                    //source_based_test.archiveArtifacts(function_test)
                    echo "Finally skip"
                }
                Boolean create_tag = false
                Boolean publish = PUBLISH.toBoolean()
                echo "DEBUG: before run shareMethod.buildAndPublish currentBuild.result is ${currentBuild.result}!"
                shareMethod.buildAndPublish(publish, create_tag, repo_dir)
                echo "DEBUG: before assignment ${currentBuild.result}!"
                currentBuild.result="SUCCESS"
                echo "DEBUG: after assignment ${currentBuild.result}!"
                // trigger unfreeze procedure
                try {
                    echo "DEBUG: try 1 = ${currentBuild.result}"
                    build job: env.MERGE_FREEZER_TRIGGER, parameters: [[$class: 'StringParameterValue', name: 'MANUAL', value:"false"],[$class: 'BooleanParameterValue', name: 'FREEZE_OR_UNFREEZE', value:false]]
                    echo "DEBUG: try 2 = ${currentBuild.result}"
                } catch (error){
                    echo "DEBUG: catch = ${currentBuild.result}"
                    echo "Failed to trigger merge freezer!"
                }
            } finally{
                echo "DEBUG: in finally = ${currentBuild.result}"
                shareMethod.sendResult(true, true)
                if ("${currentBuild.result}" == "FAILURE" || "${currentBuild.result}" == "null"){
                    // trigger freeze procedure
                    build job: env.MERGE_FREEZER_TRIGGER, parameters: [[$class: 'StringParameterValue', name: 'MANUAL', value:"false"],[$class: 'BooleanParameterValue', name: 'FREEZE_OR_UNFREEZE', value:true]]
                }
            }
        }
    }
}
