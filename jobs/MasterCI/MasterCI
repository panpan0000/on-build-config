node{
    timestamps{
        withEnv([
            "branch=${env.branch}",
            "IS_OFFICIAL_RELEASE=false",
            "date=current",
            "timezone=-0500",
            "OS_VER=${env.OS_VER}",
            "TFTP_STATIC_FILES=${env.TFTP_STATIC_FILES}",
            "HTTP_STATIC_FILES=${env.HTTP_STATIC_FILES}",
            "USE_VCOMPUTE=${env.USE_VCOMPUTE}",
            "TESTS=${env.TESTS}",
            "OVA_POST_TESTS=${env.OVA_POST_TESTS}",
            "BINTRAY_SUBJECT=${env.BINTRAY_SUBJECT}",
            "PUBLISH=${env.PUBLISH}",
            "OVA_CACHE_BUILD=true"
        ]){
            def message = "Job Name: ${env.JOB_NAME} \n" + "Build Full URL: ${env.BUILD_URL} \n" + "Phase: STARTED \n"
            echo "$message"
            slackSend "$message"
            deleteDir()
            checkout scm
            def shareMethod = load("jobs/ShareMethod.groovy")
            try{

                def function_test = load("jobs/FunctionTest/FunctionTest.groovy")
                def source_based_test = load("jobs/FunctionTest/SourceBasedTest.groovy")
                currentBuild.result="SUCCESS"
                // trigger unfreeze procedure
                try {
                    build job: env.MERGE_FREEZER_TRIGGER, parameters: [[$class: 'StringParameterValue', name: 'MANUAL', value:"false"],[$class: 'BooleanParameterValue', name: 'FREEZE_OR_UNFREEZE', value:false]]
                } catch (error){
                    echo "Failed to trigger merge freezer!"
                }
            } finally{
                shareMethod.sendResult(true, true)
                if ("${currentBuild.result}" == "FAILURE" || "${currentBuild.result}" == "null"){
                    // trigger freeze procedure
                    build job: env.MERGE_FREEZER_TRIGGER, parameters: [[$class: 'StringParameterValue', name: 'MANUAL', value:"false"],[$class: 'BooleanParameterValue', name: 'FREEZE_OR_UNFREEZE', value:true]]
                }
            }
        }
    }
}
